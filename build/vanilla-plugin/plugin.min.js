(()=>{let t=[{id:1,text:"Hi! How can I help you today?",sender:"bot",timestamp:new Date(Date.now()-1e4)},{id:2,text:"I need help with my account",sender:"user",timestamp:new Date(Date.now()-8e3)},{id:3,text:"I'd be happy to help you with your account. What specific issue are you experiencing?",sender:"bot",timestamp:new Date(Date.now()-5e3)}],s={position:"bottom-right",width:"380px",height:"500px",borderRadius:"16px",primaryColor:"#3B82F6",backgroundColor:"#FFFFFF",textColor:"#374151",headerBgColor:"#3B82F6",headerTextColor:"#FFFFFF",inputBgColor:"#FFFFFF",inputTextColor:"#374151",buttonBgColor:"#3B82F6",buttonTextColor:"#FFFFFF",messageBubbleColor:"#FFFFFF",userBubbleColor:"#3B82F6",title:"Chat Assistant",placeholder:"Type your message...",showUserAvatar:!0,showBotAvatar:!0,showOnlineIndicator:!0,compactHeader:!1,defaultOpen:!1};class e{constructor(e={}){this.config={...s,...e},this.isOpen=this.config.defaultOpen,this.messages=[...t],this.messageId=this.messages.length+1,this.element=null,this.panel=null,this.toggleButton=null,this.messageInput=null,this.messagesContainer=null,this.sendButton=null,this.init()}init(){this.createElement(),this.attachEventListeners(),this.updateDisplay(),this.renderMessages(),this.loadEnhancedCSS()}loadEnhancedCSS(){var e;document.getElementById("chat-widget-enhanced-css")||((e=document.createElement("link")).id="chat-widget-enhanced-css",e.rel="stylesheet",e.href="./vanilla-js/chat-widget-enhanced.css",document.head.appendChild(e))}createElement(){this.element=document.createElement("div"),this.element.className="chat-widget position-"+this.config.position,this.panel=document.createElement("div"),this.panel.className="chat-panel "+(this.isOpen?"open":"closed"),this.panel.innerHTML=`
                <div class="chat-header" style="
                    --header-bg-color: ${this.config.headerBgColor};
                    --header-text-color: ${this.config.headerTextColor};
                    padding: ${this.config.compactHeader?"16px 24px":"24px"};
                ">
                    <div class="chat-header-title">
                        ${this.config.showOnlineIndicator?'<div class="online-indicator"></div>':""}
                        <h3 class="chat-title" style="font-size: ${this.config.compactHeader?"18px":"20px"}">${this.config.title}</h3>
                    </div>
                    <button class="close-button" aria-label="Close chat">
                        <svg class="close-icon" style="width: ${this.config.compactHeader?"20px":"24px"}; height: ${this.config.compactHeader?"20px":"24px"}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
                <div class="chat-messages">
                    <div class="empty-state" style="display: ${0===this.messages.length?"block":"none"}">
                        <div class="empty-icon">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.955 8.955 0 01-3.774-.829L3 21l1.829-6.226A8.955 8.955 0 013 12a8 8 0 018-8 8 8 0 018 8z"/>
                            </svg>
                        </div>
                        <h4 class="empty-title">Start a conversation</h4>
                        <p class="empty-description">Send a message to get started!</p>
                    </div>
                    <div class="messages-list"></div>
                </div>
                <div class="chat-input" style="
                    --input-bg-color: ${this.config.inputBgColor};
                    --input-text-color: ${this.config.inputTextColor};
                    --button-bg-color: ${this.config.buttonBgColor};
                    --button-text-color: ${this.config.buttonTextColor};
                ">
                    <div class="input-container">
                        <input 
                            type="text" 
                            class="message-input" 
                            placeholder="${this.config.placeholder}"
                            autocomplete="off"
                        />
                        <button class="send-button" disabled>
                            <svg class="send-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14m-7-7l7 7-7 7"/>
                            </svg>
                        </button>
                    </div>
                </div>
            `,this.toggleButton=document.createElement("button"),this.toggleButton.className="chat-toggle "+(this.isOpen?"open":"closed"),this.toggleButton.style.cssText=`
                --primary-color: ${this.config.primaryColor};
                --button-text-color: ${this.config.buttonTextColor};
            `,this.toggleButton.innerHTML=`
                <svg class="toggle-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.955 8.955 0 01-3.774-.829L3 21l1.829-6.226A8.955 8.955 0 013 12a8 8 0 018-8 8 8 0 018 8z"/>
                </svg>
            `,this.element.appendChild(this.panel),this.element.appendChild(this.toggleButton),this.messageInput=this.panel.querySelector(".message-input"),this.messagesContainer=this.panel.querySelector(".messages-list"),this.sendButton=this.panel.querySelector(".send-button"),this.element.style.cssText=`
                --primary-color: ${this.config.primaryColor};
                --background-color: ${this.config.backgroundColor};
                --text-color: ${this.config.textColor};
                --header-bg-color: ${this.config.headerBgColor};
                --header-text-color: ${this.config.headerTextColor};
                --input-bg-color: ${this.config.inputBgColor};
                --input-text-color: ${this.config.inputTextColor};
                --button-bg-color: ${this.config.buttonBgColor};
                --button-text-color: ${this.config.buttonTextColor};
                --message-bubble-color: ${this.config.messageBubbleColor};
                --user-bubble-color: ${this.config.userBubbleColor};
            `}attachEventListeners(){this.toggleButton.addEventListener("click",()=>{this.toggle()}),this.panel.querySelector(".close-button").addEventListener("click",()=>{this.close()}),this.messageInput.addEventListener("input",()=>{this.updateSendButton()}),this.messageInput.addEventListener("keypress",e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),this.sendMessage())}),this.sendButton.addEventListener("click",()=>{this.sendMessage()}),document.addEventListener("click",e=>{this.isOpen&&this.element.contains(e.target)})}updateSendButton(){var e=0<this.messageInput.value.trim().length;this.sendButton.disabled=!e}sendMessage(){let t=this.messageInput.value.trim();var e;t&&(e={id:this.messageId++,text:t,sender:"user",timestamp:new Date},this.messages.push(e),this.messageInput.value="",this.updateSendButton(),setTimeout(()=>{var e={id:this.messageId++,text:`Thanks for your message: "${t}". This is an automated response.`,sender:"bot",timestamp:new Date};this.messages.push(e),this.renderMessages()},1e3),this.renderMessages())}renderMessages(){this.panel.querySelector(".empty-state").style.display=0===this.messages.length?"block":"none",this.messagesContainer.innerHTML=this.messages.map(e=>`
                <div class="message ${e.sender}">
                    <div class="message-avatar ${e.sender}">${"user"===e.sender?"U":"A"}</div>
                    <div class="message-bubble ${e.sender}">
                        <p class="message-text">${e.text}</p>
                        <p class="message-time ${e.sender}">
                            ${this.formatTime(e.timestamp)}
                        </p>
                    </div>
                </div>
            `).join(""),this.messagesContainer.scrollTop=this.messagesContainer.scrollHeight}formatTime(e){return e.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}open(){this.isOpen=!0,this.updateDisplay()}close(){this.isOpen=!1,this.updateDisplay()}toggle(){this.isOpen=!this.isOpen,this.updateDisplay()}updateDisplay(){this.isOpen?(this.panel.classList.remove("closed"),this.panel.classList.add("open"),this.toggleButton.classList.remove("closed"),this.toggleButton.classList.add("open")):(this.panel.classList.remove("open"),this.panel.classList.add("closed"),this.toggleButton.classList.remove("open"),this.toggleButton.classList.add("closed"))}mount(e=document.body){return e.appendChild(this.element),this}destroy(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}updateConfig(e){this.config={...this.config,...e},this.applyStyles()}applyStyles(){this.element.style.cssText=`
                --primary-color: ${this.config.primaryColor};
                --background-color: ${this.config.backgroundColor};
                --text-color: ${this.config.textColor};
                --header-bg-color: ${this.config.headerBgColor};
                --header-text-color: ${this.config.headerTextColor};
                --input-bg-color: ${this.config.inputBgColor};
                --input-text-color: ${this.config.inputTextColor};
                --button-bg-color: ${this.config.buttonBgColor};
                --button-text-color: ${this.config.buttonTextColor};
                --message-bubble-color: ${this.config.messageBubbleColor};
                --user-bubble-color: ${this.config.userBubbleColor};
            `,this.element.className="chat-widget position-"+this.config.position,this.toggleButton.style.cssText=`
                --primary-color: ${this.config.primaryColor};
                --button-text-color: ${this.config.buttonTextColor};
            `}}window.EnhancedChatWidget=e,void 0!==window.chatWidgetConfig&&document.addEventListener("DOMContentLoaded",()=>{new e(window.chatWidgetConfig).mount()})})();